# Location union type for polymorphic location handling
union Location = AddressLocation | CoordinatesLocation | ShopLocation

# Address location type definition
type AddressLocation {
  locationId: String!
  accountId: String!
  locationType: String!
  extendedAttributes: AWSJSON
  address: Address!
}

# Coordinates location type definition  
type CoordinatesLocation {
  locationId: String!
  accountId: String!
  locationType: String!
  extendedAttributes: AWSJSON
  coordinates: Coordinates!
}

# Shop location type definition
type ShopLocation {
  locationId: String!
  accountId: String!
  locationType: String!
  extendedAttributes: AWSJSON
  shop: Shop!
}

# Address type definition
type Address {
  streetAddress: String!
  streetAddress2: String
  city: String!
  stateProvince: String
  postalCode: String!
  country: String!
}

# Coordinates type definition
type Coordinates {
  latitude: Float!
  longitude: Float!
  altitude: Float
  accuracy: Float
}

# Shop type definition
type Shop {
  name: String!
  contactId: String!
  address: Address!
}

# List output type for paginated location results
type LocationListOutput {
  locations: [Location!]!
  nextCursor: String
}

# Input types for location operations

input CreateAddressLocationInput {
  accountId: String!
  address: AddressInput!
  extendedAttributes: AWSJSON
}

input CreateCoordinatesLocationInput {
  accountId: String!
  coordinates: CoordinatesInput!
  extendedAttributes: AWSJSON
}

input CreateShopLocationInput {
  accountId: String!
  shop: ShopInput!
  extendedAttributes: AWSJSON
}


input UpdateAddressLocationInput {
  accountId: String!
  address: AddressInput!
  extendedAttributes: AWSJSON
}

input UpdateCoordinatesLocationInput {
  accountId: String!
  coordinates: CoordinatesInput!
  extendedAttributes: AWSJSON
}

input UpdateShopLocationInput {
  accountId: String!
  shop: ShopInput!
  extendedAttributes: AWSJSON
}

input AddressInput {
  streetAddress: String!
  streetAddress2: String
  city: String!
  stateProvince: String
  postalCode: String!
  country: String!
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
  altitude: Float
  accuracy: Float
}

input ShopInput {
  name: String!
  contactId: String!
  address: AddressInput!
}

# Removed GetLocationInput - now uses direct arguments


input ListLocationsOptions {
  limit: Int
  cursor: String
}


